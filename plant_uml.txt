@startuml
package neat_net {
  class Genome {
  + n_in: int
  + n_out: int
  + recurrent: bool
  + verbose: bool
  + allowed_act_funcs: str []
  - node_genes: dict []
  - conn_genes: dict []
  + save(filename: str)
  + load(filename: str)
  }

  class NNFF {
  + genome: Genome
  + layers: int [][]
  + feedforward(): int []
  - get_layers_ff(): int [][]
  - get_layer_info(): dict []
  }
}

package pop_control {
  class Population {
  + popsize: int
  - this_gen: Genome []
  - fitness_assesor: AbstractEvaluator
  - create_first_gen(): Genome []
  + run()
  }
  note right of Population: `fitness_assesor.run(this_gen)` is called in a loop

  interface AbstractEvaluator {
  + run(genomes: Genome []): None
  - generate_images(genomes: Genome []): Image []
  }
  class InteractiveEvaluator
  class PixelDiffEvaluator {
  + target_img : Image
  - l2_diff_rating(img: Image)
  }
  class NeuralEvaluator {
  - net
  }
}

package image_cppn {
  class CPPN {
  + channels: int
  - net: NNFF
  - fourier_map_vec: None/np.ndarray
  - bias_vec_len: int
  + create_image(): Image
  - get_coords(imsize: Tuple[int,int]): np.ndarray
  }

  class Image {
  + size: Tuple[int,int]
  + channels: int
  - data: np.ndarray
  + save(filename: str)
  + load(filename: str)
  + show()
  }
}


package tk_display {
  class ImgGrid {
  - images: Image []
  + run(): float []
  }
}

package fourier {
  class initialise_fourier_mapping_vector << (F,orchid) Function >> {
  }
  hide initialise_fourier_mapping_vector members
  class fourier_mapping << (F,orchid) Function >> {
  }
  hide fourier_mapping members
}

package netviz {
  class NetworkVisualiser {
  - genome: Genome
  + show()
  + save()
  }
}

' alternative way of doing things using functions
' class FitFunc << (F,orchid) Function<Genome[],int[]> >>
' hide FitFunc members
' class InteractiveFitFunc << (F,orchid) Function<T,TResult> >>
' hide InteractiveFitFunc members
' FitFunc <|-- InteractiveFitFunc
' note top of FitFunc: Possible alternative way of modelling using Functions??

' define relationships
CPPN "1" *-- "1" NNFF
NNFF "1" *-- "1" Genome
Population "1" *-- "n" Genome
Population "1" *-- "1" AbstractEvaluator
AbstractEvaluator <|-- InteractiveEvaluator
AbstractEvaluator <|-- PixelDiffEvaluator
AbstractEvaluator <|-- NeuralEvaluator
InteractiveEvaluator "1" *-- "1" ImgGrid
PixelDiffEvaluator "1" *-- "1" Image
ImgGrid "1" *-- "n" Image
Image .. CPPN : generated by >
NetworkVisualiser *-- Genome
@enduml
